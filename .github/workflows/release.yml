name: release

on:
  push:
    branches:
      - master
    paths:
        - "version.ts"
        - ".github/workflows/release.yml"

jobs:
  build:
    name: ${{ matrix.kind }} ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    strategy:
      matrix:
        os: [macOS-latest, windows-latest, ubuntu-latest]

    env:
      GH_ACTIONS: true
      RUST_BACKTRACE: full
      DENO_BUILD_MODE: release

    steps:
      - name: Clone repository
        uses: actions/checkout@v1

      - name: Install rust
        uses: hecrj/setup-rust-action@v1
        with:
          rust-version: "1.43.1"

      - name: Log versions
        run: |
          node -v
          rustc --version
          cargo --version
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Remove Some Cache
        if: matrix.os == 'windows-latest'
        run: |
          rm target/release/gn_root -Recurse -ErrorAction Ignore
          rm target/debug/gn_root -Recurse -ErrorAction Ignore

      - name: Install python
        uses: actions/setup-python@v1
        with:
          python-version: "2.7.x"
          architecture: x64

      - name: Install Rust

        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y

      - name: Install nightly Rust
        run: rustup install nightly

      - name: Build
        env:
          RUST_BACKTRACE: 1
        run: cargo +nightly build --release

      - name: Get version
        # give this job an ID
        id: v
        # set output for this job
        run: VERSION=`deno run ./tools/print-version.ts --quiet`
             echo ::set-output name=version::$VERSION

      - name: Release Plugin
        uses: softprops/action-gh-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # use the version job ID to get the output
          tag_name: ${{ steps.v.outputs.version }}
          files: |
            target/release/libdeno_swc.dylib
            target/release/deno_swc.dll
            target/release/libdeno_swc.so
