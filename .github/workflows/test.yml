# This is a basic workflow to help you get started with Actions

name: Test

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  typescript-format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: denolib/setup-deno@master
        with:
          deno-version: v1.2.0 
      - name: Format Check
        run: deno fmt --check

  rust-format-lint:
    runs-on: ubuntu-latest
    steps:
      # Cache cargo build, refer https://github.com/actions/cache/blob/main/examples.md#rust---cargo
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt, clippy
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  swc-deno-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: denolib/setup-deno@master
        with:
          deno-version: v1.2.0 
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - name: Install nightly Rust
        run: rustup install nightly
      - name: Build swc
        run: cargo +nightly build
      - name: Test
        run: ./tools/test.sh

  swc-rust-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: denolib/setup-deno@master
        with:
          deno-version: v1.2.0 
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Install Rust
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - name: Install nightly Rust
        run: rustup install nightly
      - name: Build swc_core
        run: cargo +nightly build
        working-directory: ./swc_core
      - name: Test
        run: cargo +nightly test 
        working-directory: ./swc_core